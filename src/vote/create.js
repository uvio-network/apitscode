// @generated by protobuf-ts 2.9.4 with parameter output_javascript
// @generated from protobuf file "pbf/vote/create.proto" (package "vote", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class CreateI$Type extends MessageType {
    constructor() {
        super("vote.CreateI", [
            { no: 100, name: "filter", kind: "message", T: () => CreateI_Filter },
            { no: 200, name: "object", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateI_Object }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.object = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vote.CreateI_Filter filter */ 100:
                    message.filter = CreateI_Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                case /* repeated vote.CreateI_Object object */ 200:
                    message.object.push(CreateI_Object.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* vote.CreateI_Filter filter = 100; */
        if (message.filter)
            CreateI_Filter.internalBinaryWrite(message.filter, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* repeated vote.CreateI_Object object = 200; */
        for (let i = 0; i < message.object.length; i++)
            CreateI_Object.internalBinaryWrite(message.object[i], writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateI
 */
export const CreateI = new CreateI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateI_Filter$Type extends MessageType {
    constructor() {
        super("vote.CreateI_Filter", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateI_Filter
 */
export const CreateI_Filter = new CreateI_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateI_Object$Type extends MessageType {
    constructor() {
        super("vote.CreateI_Object", [
            { no: 100, name: "intern", kind: "message", T: () => CreateI_Object_Intern },
            { no: 200, name: "public", kind: "message", T: () => CreateI_Object_Public }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vote.CreateI_Object_Intern intern */ 100:
                    message.intern = CreateI_Object_Intern.internalBinaryRead(reader, reader.uint32(), options, message.intern);
                    break;
                case /* vote.CreateI_Object_Public public */ 200:
                    message.public = CreateI_Object_Public.internalBinaryRead(reader, reader.uint32(), options, message.public);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* vote.CreateI_Object_Intern intern = 100; */
        if (message.intern)
            CreateI_Object_Intern.internalBinaryWrite(message.intern, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* vote.CreateI_Object_Public public = 200; */
        if (message.public)
            CreateI_Object_Public.internalBinaryWrite(message.public, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateI_Object
 */
export const CreateI_Object = new CreateI_Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateI_Object_Intern$Type extends MessageType {
    constructor() {
        super("vote.CreateI_Object_Intern", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateI_Object_Intern
 */
export const CreateI_Object_Intern = new CreateI_Object_Intern$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateI_Object_Public$Type extends MessageType {
    constructor() {
        super("vote.CreateI_Object_Public", [
            { no: 100, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 200, name: "claim", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 300, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 400, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 500, name: "lifecycle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 600, name: "meta", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 700, name: "option", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 800, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.claim = "";
        message.hash = "";
        message.kind = "";
        message.lifecycle = "";
        message.meta = "";
        message.option = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 100:
                    message.chain = reader.string();
                    break;
                case /* string claim */ 200:
                    message.claim = reader.string();
                    break;
                case /* string hash */ 300:
                    message.hash = reader.string();
                    break;
                case /* string kind */ 400:
                    message.kind = reader.string();
                    break;
                case /* string lifecycle */ 500:
                    message.lifecycle = reader.string();
                    break;
                case /* string meta */ 600:
                    message.meta = reader.string();
                    break;
                case /* string option */ 700:
                    message.option = reader.string();
                    break;
                case /* string value */ 800:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 100; */
        if (message.chain !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.chain);
        /* string claim = 200; */
        if (message.claim !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.claim);
        /* string hash = 300; */
        if (message.hash !== "")
            writer.tag(300, WireType.LengthDelimited).string(message.hash);
        /* string kind = 400; */
        if (message.kind !== "")
            writer.tag(400, WireType.LengthDelimited).string(message.kind);
        /* string lifecycle = 500; */
        if (message.lifecycle !== "")
            writer.tag(500, WireType.LengthDelimited).string(message.lifecycle);
        /* string meta = 600; */
        if (message.meta !== "")
            writer.tag(600, WireType.LengthDelimited).string(message.meta);
        /* string option = 700; */
        if (message.option !== "")
            writer.tag(700, WireType.LengthDelimited).string(message.option);
        /* string value = 800; */
        if (message.value !== "")
            writer.tag(800, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateI_Object_Public
 */
export const CreateI_Object_Public = new CreateI_Object_Public$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateO$Type extends MessageType {
    constructor() {
        super("vote.CreateO", [
            { no: 100, name: "filter", kind: "message", T: () => CreateO_Filter },
            { no: 200, name: "object", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateO_Object }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.object = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vote.CreateO_Filter filter */ 100:
                    message.filter = CreateO_Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                case /* repeated vote.CreateO_Object object */ 200:
                    message.object.push(CreateO_Object.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* vote.CreateO_Filter filter = 100; */
        if (message.filter)
            CreateO_Filter.internalBinaryWrite(message.filter, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* repeated vote.CreateO_Object object = 200; */
        for (let i = 0; i < message.object.length; i++)
            CreateO_Object.internalBinaryWrite(message.object[i], writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateO
 */
export const CreateO = new CreateO$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateO_Filter$Type extends MessageType {
    constructor() {
        super("vote.CreateO_Filter", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateO_Filter
 */
export const CreateO_Filter = new CreateO_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateO_Object$Type extends MessageType {
    constructor() {
        super("vote.CreateO_Object", [
            { no: 100, name: "intern", kind: "message", T: () => CreateO_Object_Intern },
            { no: 200, name: "public", kind: "message", T: () => CreateO_Object_Public }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vote.CreateO_Object_Intern intern */ 100:
                    message.intern = CreateO_Object_Intern.internalBinaryRead(reader, reader.uint32(), options, message.intern);
                    break;
                case /* vote.CreateO_Object_Public public */ 200:
                    message.public = CreateO_Object_Public.internalBinaryRead(reader, reader.uint32(), options, message.public);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* vote.CreateO_Object_Intern intern = 100; */
        if (message.intern)
            CreateO_Object_Intern.internalBinaryWrite(message.intern, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* vote.CreateO_Object_Public public = 200; */
        if (message.public)
            CreateO_Object_Public.internalBinaryWrite(message.public, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateO_Object
 */
export const CreateO_Object = new CreateO_Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateO_Object_Intern$Type extends MessageType {
    constructor() {
        super("vote.CreateO_Object_Intern", [
            { no: 100, name: "created", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 200, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.created = "";
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string created */ 100:
                    message.created = reader.string();
                    break;
                case /* string id */ 200:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string created = 100; */
        if (message.created !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.created);
        /* string id = 200; */
        if (message.id !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateO_Object_Intern
 */
export const CreateO_Object_Intern = new CreateO_Object_Intern$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateO_Object_Public$Type extends MessageType {
    constructor() {
        super("vote.CreateO_Object_Public", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vote.CreateO_Object_Public
 */
export const CreateO_Object_Public = new CreateO_Object_Public$Type();
