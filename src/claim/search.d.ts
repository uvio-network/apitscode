// @generated by protobuf-ts 2.9.4 with parameter output_javascript
// @generated from protobuf file "pbf/claim/search.proto" (package "claim", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * SearchI is the input for searching claims.
 *
 *     {
 *         "filter": {
 *             "paging": {
 *                 "kind": "page",
 *                 "strt": "0",
 *                 "stop": "49"
 *             }
 *         },
 *         "object": [
 *             {
 *                 "public": {
 *                     "cate": "863826"
 *                 }
 *             }
 *         ]
 *     }
 *
 *
 * @generated from protobuf message claim.SearchI
 */
export interface SearchI {
  /**
   * @generated from protobuf field: claim.SearchI_Filter filter = 100;
   */
  filter?: SearchI_Filter;
  /**
   * @generated from protobuf field: repeated claim.SearchI_Object object = 200;
   */
  object: SearchI_Object[];
}
/**
 * @generated from protobuf message claim.SearchI_Filter
 */
export interface SearchI_Filter {
  /**
   * @generated from protobuf field: claim.SearchI_Filter_Paging paging = 100;
   */
  paging?: SearchI_Filter_Paging;
}
/**
 * @generated from protobuf message claim.SearchI_Filter_Paging
 */
export interface SearchI_Filter_Paging {
  /**
   * @generated from protobuf field: string kind = 100;
   */
  kind: string;
  /**
   * @generated from protobuf field: string strt = 200;
   */
  strt: string;
  /**
   * @generated from protobuf field: string stop = 300;
   */
  stop: string;
}
/**
 * @generated from protobuf message claim.SearchI_Object
 */
export interface SearchI_Object {
  /**
   * @generated from protobuf field: claim.SearchI_Object_Intern intern = 100;
   */
  intern?: SearchI_Object_Intern;
  /**
   * @generated from protobuf field: claim.SearchI_Object_Public public = 200;
   */
  public?: SearchI_Object_Public;
  /**
   * @generated from protobuf field: claim.SearchI_Object_Symbol symbol = 300;
   */
  symbol?: SearchI_Object_Symbol;
}
/**
 * @generated from protobuf message claim.SearchI_Object_Intern
 */
export interface SearchI_Object_Intern {
  /**
   * clam is the ID of the claim being searched. If searching for a particular
   * claim, the search query object must not contain any other fields.
   *
   * @generated from protobuf field: string clam = 100;
   */
  clam: string;
  /**
   * user is the ID of the user having created the claims being searched. If
   * searching for claims created by a particular user, the search query object
   * must not contain any other fields.
   *
   * @generated from protobuf field: string user = 200;
   */
  user: string;
}
/**
 * @generated from protobuf message claim.SearchI_Object_Public
 */
export interface SearchI_Object_Public {
  /**
   * cate is the ID of the category label for which claims are being searched.
   *
   * Providing multiple host and category labels within the same search query
   * object means to search for the intersection of all the given labels within
   * that search query context. That is, searching for { A, B, C } returns claim
   * objects that are associated to A, B and C.
   *
   * @generated from protobuf field: string cate = 100;
   */
  cate: string;
  /**
   * host is the ID of the host label for which claims are being searched.
   *
   * Providing multiple host and category labels within the same search query
   * object means to search for the intersection of all the given labels within
   * that search query context. That is, searching for { A, B, C } returns claim
   * objects that are associated to A, B and C.
   *
   * @generated from protobuf field: string host = 200;
   */
  host: string;
}
/**
 * @generated from protobuf message claim.SearchI_Object_Symbol
 */
export interface SearchI_Object_Symbol {
  /**
   * like set to any valid user ID returns the list of claims that the calling
   * user reacted to in the form of a like, within the specified boundaries of
   * filter.paging.strt and filter.paging.stop. The first paging pointer here is
   * the absolute lower boundary of the requested page, read min. The second
   * paging pointer here is the absolute upper boundary of the requested page,
   * read max.
   *
   * @generated from protobuf field: string like = 100;
   */
  like: string;
  /**
   * list set to any valid list ID returns all of the claim objects matching the
   * provided list's criteria. Paging is available for paging kind page and
   * unix.
   *
   * @generated from protobuf field: string list = 200;
   */
  list: string;
  /**
   * time set to a valid symbol or a unix time range returns the list of claims
   * known to happen within the specified boundaries. Note that the default
   * claim retention for past claims is one week. The premium subscriber claim
   * retention for past claims is three months.
   *
   *     time set to "dflt" returns the list of claims known to happen, or
   *     have happened, within the specified boundaries of filter.paging.strt
   *     and filter.paging.stop. The first paging pointer here is the unix
   *     timestamp in seconds of the lower boundary, read min. The second paging
   *     pointer here is the unix timestamp in seconds of the upper boundary,
   *     read max.
   *
   *     time set to "hpnd" returns the list of happened claims known to have
   *     already concluded within the past week.
   *
   *     time set to "upcm" returns the list of upcoming claims known to happen
   *     within the next week.
   *
   *
   * @generated from protobuf field: string time = 300;
   */
  time: string;
}
/**
 * SearchO is the output for searching claims.
 *
 *     {
 *         "object": [
 *             {
 *                 "extern": [
 *                     {
 *                         "amnt": "1047",
 *                         "kind": "link",
 *                         "user": true
 *                     }
 *                 ],
 *                 "intern": {
 *                     "crtd": "1689001255",
 *                     "clam": "778237",
 *                     "user": "551265"
 *                 },
 *                 "public": {
 *                     "cate": "863826",
 *                     "dura": "3600",
 *                     "host": "233923",
 *                     "link": "https://google.com",
 *                     "time": "1689001255"
 *                 }
 *             },
 *             ...
 *         ]
 *     }
 *
 *
 * @generated from protobuf message claim.SearchO
 */
export interface SearchO {
  /**
   * @generated from protobuf field: claim.SearchO_Filter filter = 100;
   */
  filter?: SearchO_Filter;
  /**
   * @generated from protobuf field: repeated claim.SearchO_Object object = 200;
   */
  object: SearchO_Object[];
}
/**
 * @generated from protobuf message claim.SearchO_Filter
 */
export interface SearchO_Filter {}
/**
 * @generated from protobuf message claim.SearchO_Object
 */
export interface SearchO_Object {
  /**
   * @generated from protobuf field: repeated claim.SearchO_Object_Extern extern = 100;
   */
  extern: SearchO_Object_Extern[];
  /**
   * @generated from protobuf field: claim.SearchO_Object_Intern intern = 200;
   */
  intern?: SearchO_Object_Intern;
  /**
   * @generated from protobuf field: claim.SearchO_Object_Public public = 300;
   */
  public?: SearchO_Object_Public;
}
/**
 * @generated from protobuf message claim.SearchO_Object_Extern
 */
export interface SearchO_Object_Extern {
  /**
   * amnt is the number of reactions this claim received for the specified kind.
   *
   * @generated from protobuf field: string amnt = 100;
   */
  amnt: string;
  /**
   * kind is the type of reaction this claim received.
   *
   *     link for users clicking the claim link while the claim is happening
   *
   *
   * @generated from protobuf field: string kind = 200;
   */
  kind: string;
  /**
   * user expresses whether the calling user reacted to this claim with the
   * specified reaction kind.
   *
   * @generated from protobuf field: bool user = 300;
   */
  user: boolean;
}
/**
 * @generated from protobuf message claim.SearchO_Object_Intern
 */
export interface SearchO_Object_Intern {
  /**
   * crtd is the unix timestamp in seconds at which the claim got created.
   *
   * @generated from protobuf field: string crtd = 100;
   */
  crtd: string;
  /**
   * clam is the ID of the claim being searched.
   *
   * @generated from protobuf field: string clam = 200;
   */
  clam: string;
  /**
   * list is the ID of the list this claim belongs to, if any. Note that this
   * field will only be set when searching claims using symbol.list.
   *
   * @generated from protobuf field: string list = 300;
   */
  list: string;
  /**
   * user is the ID of the user who created this claim.
   *
   * @generated from protobuf field: string user = 400;
   */
  user: string;
}
/**
 * @generated from protobuf message claim.SearchO_Object_Public
 */
export interface SearchO_Object_Public {
  /**
   * cate is the comma separated list of label IDs under which the claim is
   * categorized.
   *
   * @generated from protobuf field: string cate = 100;
   */
  cate: string;
  /**
   * dura is the estimated duration of the claim in seconds.
   *
   * @generated from protobuf field: string dura = 200;
   */
  dura: string;
  /**
   * host is the internal host ID expected to host the claim.
   *
   * @generated from protobuf field: string host = 300;
   */
  host: string;
  /**
   * link is the online location at which the claim is expected to take place.
   * For IRL claims this may just be some informational website.
   *
   * @generated from protobuf field: string link = 400;
   */
  link: string;
  /**
   * time is the unix timestamp in seconds at which the claim is expected to
   * start.
   *
   * @generated from protobuf field: string time = 500;
   */
  time: string;
}
declare class SearchI$Type extends MessageType<SearchI> {
  constructor();
  create(value?: PartialMessage<SearchI>): SearchI;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI,
  ): SearchI;
  internalBinaryWrite(
    message: SearchI,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI
 */
export declare const SearchI: SearchI$Type;
declare class SearchI_Filter$Type extends MessageType<SearchI_Filter> {
  constructor();
  create(value?: PartialMessage<SearchI_Filter>): SearchI_Filter;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI_Filter,
  ): SearchI_Filter;
  internalBinaryWrite(
    message: SearchI_Filter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI_Filter
 */
export declare const SearchI_Filter: SearchI_Filter$Type;
declare class SearchI_Filter_Paging$Type extends MessageType<SearchI_Filter_Paging> {
  constructor();
  create(value?: PartialMessage<SearchI_Filter_Paging>): SearchI_Filter_Paging;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI_Filter_Paging,
  ): SearchI_Filter_Paging;
  internalBinaryWrite(
    message: SearchI_Filter_Paging,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI_Filter_Paging
 */
export declare const SearchI_Filter_Paging: SearchI_Filter_Paging$Type;
declare class SearchI_Object$Type extends MessageType<SearchI_Object> {
  constructor();
  create(value?: PartialMessage<SearchI_Object>): SearchI_Object;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI_Object,
  ): SearchI_Object;
  internalBinaryWrite(
    message: SearchI_Object,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI_Object
 */
export declare const SearchI_Object: SearchI_Object$Type;
declare class SearchI_Object_Intern$Type extends MessageType<SearchI_Object_Intern> {
  constructor();
  create(value?: PartialMessage<SearchI_Object_Intern>): SearchI_Object_Intern;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI_Object_Intern,
  ): SearchI_Object_Intern;
  internalBinaryWrite(
    message: SearchI_Object_Intern,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI_Object_Intern
 */
export declare const SearchI_Object_Intern: SearchI_Object_Intern$Type;
declare class SearchI_Object_Public$Type extends MessageType<SearchI_Object_Public> {
  constructor();
  create(value?: PartialMessage<SearchI_Object_Public>): SearchI_Object_Public;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI_Object_Public,
  ): SearchI_Object_Public;
  internalBinaryWrite(
    message: SearchI_Object_Public,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI_Object_Public
 */
export declare const SearchI_Object_Public: SearchI_Object_Public$Type;
declare class SearchI_Object_Symbol$Type extends MessageType<SearchI_Object_Symbol> {
  constructor();
  create(value?: PartialMessage<SearchI_Object_Symbol>): SearchI_Object_Symbol;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchI_Object_Symbol,
  ): SearchI_Object_Symbol;
  internalBinaryWrite(
    message: SearchI_Object_Symbol,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchI_Object_Symbol
 */
export declare const SearchI_Object_Symbol: SearchI_Object_Symbol$Type;
declare class SearchO$Type extends MessageType<SearchO> {
  constructor();
  create(value?: PartialMessage<SearchO>): SearchO;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchO,
  ): SearchO;
  internalBinaryWrite(
    message: SearchO,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchO
 */
export declare const SearchO: SearchO$Type;
declare class SearchO_Filter$Type extends MessageType<SearchO_Filter> {
  constructor();
  create(value?: PartialMessage<SearchO_Filter>): SearchO_Filter;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchO_Filter,
  ): SearchO_Filter;
  internalBinaryWrite(
    message: SearchO_Filter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchO_Filter
 */
export declare const SearchO_Filter: SearchO_Filter$Type;
declare class SearchO_Object$Type extends MessageType<SearchO_Object> {
  constructor();
  create(value?: PartialMessage<SearchO_Object>): SearchO_Object;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchO_Object,
  ): SearchO_Object;
  internalBinaryWrite(
    message: SearchO_Object,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchO_Object
 */
export declare const SearchO_Object: SearchO_Object$Type;
declare class SearchO_Object_Extern$Type extends MessageType<SearchO_Object_Extern> {
  constructor();
  create(value?: PartialMessage<SearchO_Object_Extern>): SearchO_Object_Extern;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchO_Object_Extern,
  ): SearchO_Object_Extern;
  internalBinaryWrite(
    message: SearchO_Object_Extern,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchO_Object_Extern
 */
export declare const SearchO_Object_Extern: SearchO_Object_Extern$Type;
declare class SearchO_Object_Intern$Type extends MessageType<SearchO_Object_Intern> {
  constructor();
  create(value?: PartialMessage<SearchO_Object_Intern>): SearchO_Object_Intern;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchO_Object_Intern,
  ): SearchO_Object_Intern;
  internalBinaryWrite(
    message: SearchO_Object_Intern,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchO_Object_Intern
 */
export declare const SearchO_Object_Intern: SearchO_Object_Intern$Type;
declare class SearchO_Object_Public$Type extends MessageType<SearchO_Object_Public> {
  constructor();
  create(value?: PartialMessage<SearchO_Object_Public>): SearchO_Object_Public;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchO_Object_Public,
  ): SearchO_Object_Public;
  internalBinaryWrite(
    message: SearchO_Object_Public,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message claim.SearchO_Object_Public
 */
export declare const SearchO_Object_Public: SearchO_Object_Public$Type;
export {};
